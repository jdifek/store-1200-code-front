"use client";
import React, { useState } from "react";
import {
  Search,
  User,
  Scale,
  Heart,
  ShoppingCart,
  Grid3X3,
  ChevronDown,
  ChevronRight,
  Star,
  Phone,
  Mail,
  MapPin,
  Minus,
  Plus,
  Check,
  Truck,
  Shield,
  Headphones,
  ChevronLeft,
  ChevronUp,
} from "lucide-react";
import Image from "next/image";

// Mock –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞
const mockProduct = {
  id: "1",
  name: "–íitm–∞in –êntmin–µr S21 –ùydr–æ 319th",
  price: 45600,
  oldPrice: 52000,
  rating: 4,
  reviews: 12,
  discount: 12,
  categoryId: "1",
  categoryName: "–ê—Å–∏–∫–∏",
  images: ["/1.jpg", "/2.jpg"],
  description: `–ù–æ–≤–µ –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è –¥–ª—è –º–∞–π–Ω—ñ–Ω–≥—É –íitm–∞in –êntmin–µr S21 –ùydr–æ 335th. –í –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ —î –±–∞–≥–∞—Ç–æ —Ä—ñ–∑–Ω–∏—Ö –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤, –¥–ª—è –æ–ø—Ç–æ–≤–∏—Ö –ø–æ–∫—É–ø—Ü—ñ–≤ –¥—ñ—é—Ç—å –∑–Ω–∏–∂–∫–∏. –ì–∞—Ä–∞–Ω—Ç—ñ—è 12 –º—ñ—Å—è—Ü—ñ–≤. –î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –£–∫—Ä–∞—ó–Ω—ñ.

  üìù–¢–µ—Ö.—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∞–ø–∞—Ä–∞—Ç—É:

‚ö°Ô∏è–ú–æ–¥–µ–ª—å –∞–ø–∞—Ä–∞—Ç—É: –íitm–∞in –êntmin–µr S21 –ùydr–æ 335th

‚ö°Ô∏è–ó–¥–æ–±—É–≤–∞–Ω—ñ –º–æ–Ω–µ—Ç–∏: –í–¢–°

‚ö°Ô∏è–ê–ª–≥–æ—Ä–∏—Ç–º: S–ù–ê-256.

‚ö°Ô∏è–ù–∞shra—Ç–µ -- 335 th

‚ö°Ô∏è–û—Ö–æ–ª–æ–¥–∂–µ–Ω–Ω—è: –ì—ñ–¥—Ä–æ–æ—Ö–æ–ª–æ–¥–∂–µ–Ω–Ω—è

‚ö°Ô∏è–ï–Ω–µ—Ä–≥–æ—Å–ø–æ–∂–∏–≤–∞–Ω–Ω—è: 5360 W–∞tt

‚ö°Ô∏è–†—ñ–≤–µ–Ω—å —à—É–º—É: 70 –¥–ë
`,
  inStock: true,
  stockCount: 5,
};

// Mock —Å—Ö–æ–∂–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤
const mockSimilarProducts = [
  {
    id: "2",
    name: "–ú–æ–±–∏–ª—å–Ω—ã–π —Ä–∞—Å—Ç–≤–æ—Ä–Ω—ã–π —É–∑–µ–ª –¥–ª—è –∫–∞—Å, –∂–∫—É, —Å–∑—Ä",
    price: 160000,
    oldPrice: null,
    rating: 4,
    reviews: 8,
    image: "/4.jpg",
  },
  {
    id: "3",
    name: "–°–º–µ—à–∏–≤–∞—é—â–∏–π —Ä–∞—Å—Ç–≤–æ—Ä–Ω—ã–π —É–∑–µ–ª –¥–ª—è –∂–∏–¥–∫–∏—Ö –∏ —Å—É—Ö–∏—Ö —É–¥–æ",
    price: 185000,
    oldPrice: 187000,
    rating: 5,
    reviews: 15,
    image: "/6.jpg",
  },
  {
    id: "4",
    name: "–íitm–∞in –êntmin–µr S21 –ùydr–æ 319th",
    price: 67800,
    oldPrice: null,
    rating: 4,
    reviews: 6,
    image: "/1.jpg",
  },
  {
    id: "5",
    name: "–íitm–∞in –êntmin–µr S21 –ùydr–æ 335th",
    price: 92000,
    oldPrice: 99500,
    rating: 4,
    reviews: 9,
    image: "/2.jpg",
  },
];

// Mock –≤—ñ–¥–≥—É–∫—ñ–≤
const mockReviews = [
  {
    id: "1",
    author: "–û–ª–µ–∫—Å–∞–Ω–¥—Ä –ü–µ—Ç—Ä–µ–Ω–∫–æ",
    company: '–ú\'—è—Å–Ω–∏–π –º–∞–≥–∞–∑–∏–Ω "–î–æ–±—Ä–∞ —Ñ–µ—Ä–º–∞"',
    rating: 5,
    date: "2024-12-01",
    content:
      "–í—ñ–¥–º—ñ–Ω–Ω–∞ –≤—ñ—Ç—Ä–∏–Ω–∞! –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –≤–∂–µ –ø—ñ–≤ —Ä–æ–∫—É, –¥—É–∂–µ –∑–∞–¥–æ–≤–æ–ª–µ–Ω—ñ. –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Ç—Ä–∏–º–∞—î—Ç—å—Å—è —Å—Ç–∞–±—ñ–ª—å–Ω–æ, —Ç–æ–≤–∞—Ä –≤–∏–≥–ª—è–¥–∞—î –ø—Ä–µ–∑–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ. LED –æ—Å–≤—ñ—Ç–ª–µ–Ω–Ω—è –¥–∞—î –≥–∞—Ä–Ω–µ –ø—ñ–¥—Å–≤—ñ—á—É–≤–∞–Ω–Ω—è –ø—Ä–æ–¥—É–∫—Ü—ñ—ó.",
    pros: ["–°—Ç–∞–±—ñ–ª—å–Ω–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", "–Ø–∫—ñ—Å–Ω–µ –æ—Å–≤—ñ—Ç–ª–µ–Ω–Ω—è", "–ù–∞–¥—ñ–π–Ω–∞ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è"],
    cons: ["–¢—Ä–æ—Ö–∏ —à—É–º–Ω–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É –∫–æ–º–ø—Ä–µ—Å–æ—Ä–∞"],
  },
  {
    id: "2",
    author: "–ú–∞—Ä–∏–Ω–∞ –ö–æ–≤–∞–ª–µ–Ω–∫–æ",
    company: '–°—É–ø–µ—Ä–º–∞—Ä–∫–µ—Ç "–°–≤—ñ–∂—ñ—Å—Ç—å"',
    rating: 4,
    date: "2024-11-15",
    content:
      "–ì–∞—Ä–Ω–∞ –≤—ñ—Ç—Ä–∏–Ω–∞ –∑–∞ —Å–≤–æ—ó –≥—Ä–æ—à—ñ. –ú–æ–Ω—Ç–∞–∂ –ø—Ä–æ–π—à–æ–≤ –±–µ–∑ –ø—Ä–æ–±–ª–µ–º, –ø—Ä–∞—Ü—é—î —Å—Ç–∞–±—ñ–ª—å–Ω–æ. –Ñ–¥–∏–Ω–µ –∑–∞—É–≤–∞–∂–µ–Ω–Ω—è - —Ö–æ—Ç—ñ–ª–æ—Å—è –± –±—ñ–ª—å—à–µ —Ä–µ–≥—É–ª—é–≤–∞–Ω—å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∏.",
    pros: ["–ì–∞—Ä–Ω–µ —Å–ø—ñ–≤–≤—ñ–¥–Ω–æ—à–µ–Ω–Ω—è —Ü—ñ–Ω–∞-—è–∫—ñ—Å—Ç—å", "–ü—Ä–æ—Å—Ç–∏–π –º–æ–Ω—Ç–∞–∂"],
    cons: ["–û–±–º–µ–∂–µ–Ω–µ —Ä–µ–≥—É–ª—é–≤–∞–Ω–Ω—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∏"],
  },
  {
    id: "3",
    author: "–Ü–≥–æ—Ä –°–µ–º–µ–Ω–æ–≤–∏—á",
    company: '–ì–∞—Å—Ç—Ä–æ–Ω–æ–º "–°–º–∞–∫–æ—Ç–∞"',
    rating: 4,
    date: "2024-11-02",
    content:
      "–ö–æ—Ä–∏—Å—Ç—É—î–º–æ—Å—è –º—ñ—Å—è—Ü—å. –í —Ü—ñ–ª–æ–º—É –∑–∞–¥–æ–≤–æ–ª–µ–Ω—ñ, —Ö–æ—Ä–æ—à–∞ —è–∫—ñ—Å—Ç—å –∑–∞ —Ä–æ–∑—É–º–Ω—ñ –≥—Ä–æ—à—ñ. –†–µ–∫–æ–º–µ–Ω–¥—É—é –¥–ª—è –Ω–µ–≤–µ–ª–∏–∫–∏—Ö —Ç–æ—Ä–≥–æ–≤–∏—Ö —Ç–æ—á–æ–∫.",
    pros: ["–ö–æ–º–ø–∞–∫—Ç–Ω—ñ —Ä–æ–∑–º—ñ—Ä–∏", "–ï–Ω–µ—Ä–≥–æ–æ—â–∞–¥–Ω—ñ—Å—Ç—å"],
    cons: ["–ù–µ–≤–µ–ª–∏–∫–∏–π –æ–±—Å—è–≥"],
  },
];

const ProductPage = () => {
  const [quantity, setQuantity] = useState(1);
  const [selectedImageIndex, setSelectedImageIndex] = useState(0);
  const [activeTab, setActiveTab] = useState("description");
  const [showAllSpecs, setShowAllSpecs] = useState(false);

  const formatPrice = (price: any) => {
    return new Intl.NumberFormat("uk-UA").format(price) + " ‚Ç¥";
  };

  const handleQuantityChange = (change: any) => {
    const newQuantity = quantity + change;
    if (newQuantity >= 1 && newQuantity <= mockProduct.stockCount) {
      setQuantity(newQuantity);
    }
  };

  const renderStars = (rating: any) => {
    return [...Array(5)].map((_, i) => (
      <Star
        key={i}
        size={16}
        className={`${
          i < rating ? "text-yellow-400 fill-current" : "text-gray-300"
        }`}
      />
    ));
  };

  return (
    <div className="min-h-screen bg-white">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-12">
          {/* Product Images */}
          <div>
            <div className="relative mb-4">
              <div className="aspect-[4/3] bg-gray-100 rounded-lg overflow-hidden relative">
                <Image
                  src={mockProduct.images[selectedImageIndex]}
                  alt={mockProduct.name}
                  fill
                  className="object-cover"
                />
              </div>

              {mockProduct.discount && (
                <span className="absolute top-4 left-4 bg-red-500 text-white px-3 py-1 rounded-full text-sm font-semibold">
                  -{mockProduct.discount}%
                </span>
              )}
            </div>

            {/* Thumbnail images */}
            <div className="flex space-x-2">
              {mockProduct.images.map((img, index) => (
                <button
                  key={index}
                  onClick={() => setSelectedImageIndex(index)}
                  className={`relative w-16 h-16 rounded border-2 overflow-hidden ${
                    selectedImageIndex === index
                      ? "border-green-800"
                      : "border-gray-200"
                  } hover:border-green-600 transition-colors`}
                >
                  <Image
                    src={img}
                    alt={`${mockProduct.name} ${index + 1}`}
                    fill
                    className="object-cover"
                  />
                </button>
              ))}
            </div>
          </div>

          {/* Product Info */}
          <div>
            <div className="flex items-center space-x-2 text-sm text-gray-600 mb-2">
              <span>–ê—Ä—Ç–∏–∫—É–ª: HV-{mockProduct.id}20</span>
              <span>‚Ä¢</span>
              {mockProduct.inStock ? (
                <span className="text-green-600 flex items-center">
                  <Check size={14} className="mr-1" />–í –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ (
                  {mockProduct.stockCount} —à—Ç.)
                </span>
              ) : (
                <span className="text-red-600">–ù–µ–º–∞—î –≤ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ</span>
              )}
            </div>

            <h1 className="text-2xl lg:text-3xl font-bold text-gray-900 mb-4">
              {mockProduct.name}
            </h1>

            <div className="flex items-center space-x-4 mb-6">
              <div className="flex items-center">
                {renderStars(mockProduct.rating)}
                <span className="ml-2 text-sm text-gray-600">
                  ({mockProduct.reviews} –≤—ñ–¥–≥—É–∫—ñ–≤)
                </span>
              </div>
              <button className="text-sm text-green-800 hover:underline">
                –ù–∞–ø–∏—Å–∞—Ç–∏ –≤—ñ–¥–≥—É–∫
              </button>
            </div>

            {/* Price */}
            <div className="mb-8">
              <div className="flex items-baseline space-x-4">
                <div className="text-3xl font-bold text-gray-900">
                  {formatPrice(mockProduct.price)}
                </div>
                {mockProduct.oldPrice && (
                  <div className="text-xl text-gray-500 line-through">
                    {formatPrice(mockProduct.oldPrice)}
                  </div>
                )}
                {mockProduct.discount && (
                  <div className="bg-red-100 text-red-800 px-2 py-1 rounded text-sm font-semibold">
                    –ï–∫–æ–Ω–æ–º—ñ—è{" "}
                    {formatPrice(mockProduct.oldPrice - mockProduct.price)}
                  </div>
                )}
              </div>
            </div>

            {/* Key features */}
            {/* <div className="mb-8">
              <h3 className="font-semibold text-gray-900 mb-3">
                –ö–ª—é—á–æ–≤—ñ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:
              </h3>
              <ul className="space-y-2">
                {mockProduct.features.slice(0, 4).map((feature, index) => (
                  <li key={index} className="flex items-center text-gray-700">
                    <Check
                      size={16}
                      className="text-green-600 mr-2 flex-shrink-0"
                    />
                    {feature}
                  </li>
                ))}
              </ul>
            </div> */}

            {/* Quantity and Add to Cart */}
            <div className="mb-8">
  <div className="flex flex-col sm:flex-row sm:items-center sm:space-x-4 space-y-4 sm:space-y-0">
    {/* –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ */}
    <div className="flex items-center border border-gray-300 rounded-lg w-full sm:w-auto justify-between sm:justify-start">
      <button
        onClick={() => handleQuantityChange(-1)}
        className="p-3 hover:bg-gray-50 disabled:opacity-50 text-gray-700 !text-gray-700"
        disabled={quantity <= 1}
      >
        <Minus size={16} />
      </button>

      <span className="px-4 py-3 border-x border-gray-300 min-w-16 text-center text-gray-900 !text-gray-900 font-medium">
        {quantity}
      </span>

      <button
        onClick={() => handleQuantityChange(1)}
        className="p-3 hover:bg-gray-50 disabled:opacity-50 text-gray-700 !text-gray-700"
        disabled={quantity >= mockProduct.stockCount}
      >
        <Plus size={16} />
      </button>
    </div>

    {/* –ö–Ω–æ–ø–∫–∞ "–î–æ–¥–∞—Ç–∏ –≤ –∫–æ—à–∏–∫" */}
    <button className="flex-1 bg-green-800 text-white !text-white px-8 py-3 rounded-lg font-semibold hover:bg-green-900 transition-colors flex items-center justify-center whitespace-nowrap">
      <ShoppingCart size={18} className="mr-2" />
      –î–æ–¥–∞—Ç–∏ –≤ –∫–æ—à–∏–∫
    </button>

    {/* –ö–Ω–æ–ø–∫–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è */}
    <div className="flex items-center space-x-3 justify-center sm:justify-start">
      <button className="p-3 border border-gray-300 rounded-lg hover:bg-gray-50 text-gray-700 !text-gray-700">
        <Heart size={18} className="text-gray-600 !text-gray-600" />
      </button>
      <button className="p-3 border border-gray-300 rounded-lg hover:bg-gray-50 text-gray-700 !text-gray-700">
        <Scale size={18} className="text-gray-600 !text-gray-600" />
      </button>
    </div>
  </div>
</div>


            {/* Quick actions */}
            <div className="grid grid-cols-1 sm:grid-cols-3 gap-4 mb-8">
              <div className="flex items-center p-3 bg-green-50 rounded-lg">
                <Truck className="text-green-800 mr-3" size={20} />
                <div>
                  <div className="font-medium  !text-gray-600 text-sm">
                    –ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞
                  </div>
                  <div className="text-xs text-gray-600">–≤—ñ–¥ 10000 ‚Ç¥</div>
                </div>
              </div>
              <div className="flex items-center p-3 bg-green-50 rounded-lg">
                <Shield className="text-green-800 mr-3" size={20} />
                <div>
                  <div className="font-medium  !text-gray-600 text-sm">–ì–∞—Ä–∞–Ω—Ç—ñ—è 24 –º—ñ—Å.</div>
                  <div className="text-xs text-gray-600">–æ—Ñ—ñ—Ü—ñ–π–Ω–∞</div>
                </div>
              </div>
              <div className="flex items-center p-3 bg-green-50 rounded-lg">
                <Headphones className="text-green-800 mr-3" size={20} />
                <div>
                  <div className="font-medium  !text-gray-600 text-sm">–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—è</div>
                  <div className="text-xs text-gray-600">–±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∞</div>
                </div>
              </div>
            </div>

            {/* CTA buttons */}
            <div className="flex flex-col sm:flex-row gap-3">
              <button className="flex-1 border border-green-800 text-green-800 px-6 py-3 rounded-lg font-semibold hover:bg-green-800 hover:text-white transition-colors">
                –ö—É–ø–∏—Ç–∏ –≤ 1 –∫–ª—ñ–∫
              </button>
              <button className="flex-1 bg-yellow-200 text-green-800 px-6 py-3 rounded-lg font-semibold hover:bg-yellow-300 transition-colors">
                –ó–∞–º–æ–≤–∏—Ç–∏ –¥–∑–≤—ñ–Ω–æ–∫
              </button>
            </div>
          </div>
        </div>

        {/* Product Details Tabs */}
        <div className="mt-16">
          <div className="border-b border-gray-200">
            <nav className="flex space-x-8">
              {[
                { id: "description", name: "–û–ø–∏—Å" },
                { id: "reviews", name: `–í—ñ–¥–≥—É–∫–∏ (${mockProduct.reviews})` },
              ].map((tab) => (
                <button
                  key={tab.id}
                  onClick={() => setActiveTab(tab.id)}
                  className={`py-4 px-1 border-b-2 font-medium text-sm ${
                    activeTab === tab.id
                      ? "border-green-800 text-green-800"
                      : "border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300"
                  }`}
                >
                  {tab.name}
                </button>
              ))}
            </nav>
          </div>

          <div className="py-8">
            {activeTab === "description" && (
              <div className="prose max-w-none">
                <p className="text-gray-700 text-lg mb-6 whitespace-pre-line">
                  {mockProduct.description}
                </p>

                {/* <h3 className="text-xl font-semibold mb-4">–ü–µ—Ä–µ–≤–∞–≥–∏:</h3>
                <ul className="grid grid-cols-1 md:grid-cols-2 gap-3 mb-6">
                  {mockProduct.features.map((feature, index) => (
                    <li key={index} className="flex items-start">
                      <Check
                        size={16}
                        className="text-green-600 mr-2 mt-1 flex-shrink-0"
                      />
                      <span className="text-gray-700">{feature}</span>
                    </li>
                  ))}
                </ul> */}

                {/* <h3 className="text-xl font-semibold mb-4">–ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è:</h3>
                <p className="text-gray-700">
                  –Ü–¥–µ–∞–ª—å–Ω–æ –ø—ñ–¥—Ö–æ–¥–∏—Ç—å –¥–ª—è —Å—É–ø–µ—Ä–º–∞—Ä–∫–µ—Ç—ñ–≤, –º'—è—Å–Ω–∏—Ö –º–∞–≥–∞–∑–∏–Ω—ñ–≤,
                  –≥–∞—Å—Ç—Ä–æ–Ω–æ–º—ñ–≤ —Ç–∞ —ñ–Ω—à–∏—Ö —Ç–æ—Ä–≥–æ–≤–∏—Ö —Ç–æ—á–æ–∫, –¥–µ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ –∑–∞–±–µ–∑–ø–µ—á–∏—Ç–∏
                  –Ω–∞–ª–µ–∂–Ω–µ –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —Ç–∞ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü—ñ—é –º'—è—Å–Ω–∏—Ö —Ç–∞ –∫–æ–≤–±–∞—Å–Ω–∏—Ö
                  –≤–∏—Ä–æ–±—ñ–≤.
                </p> */}
              </div>
            )}

            {/* {activeTab === "specifications" && (
              <div>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  {Object.entries(mockProduct.specifications)
                    .slice(0, showAllSpecs ? undefined : 8)
                    .map(([key, value]) => (
                      <div
                        key={key}
                        className="flex justify-between items-center py-3 border-b border-gray-100"
                      >
                        <span className="font-medium text-gray-700">
                          {key}:
                        </span>
                        <span className="text-gray-900">{value}</span>
                      </div>
                    ))}
                </div>

                {Object.entries(mockProduct.specifications).length > 8 && (
                  <button
                    onClick={() => setShowAllSpecs(!showAllSpecs)}
                    className="mt-6 text-green-800 hover:underline flex items-center"
                  >
                    {showAllSpecs ? "–ó–≥–æ—Ä–Ω—É—Ç–∏" : "–ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏"}
                    <ChevronUp
                      size={16}
                      className={`ml-1 transform transition-transform ${
                        showAllSpecs ? "rotate-0" : "rotate-180"
                      }`}
                    />
                  </button>
                )}
              </div>
            )} */}

{activeTab === "reviews" && (
  <div className="w-full">
    {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ + –∫–Ω–æ–ø–∫–∞ */}
    <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between mb-8 space-y-4 sm:space-y-0">
      <div>
        <h3 className="text-xl font-semibold mb-2 !text-gray-800">
          –í—ñ–¥–≥—É–∫–∏ –ø–æ–∫—É–ø—Ü—ñ–≤
        </h3>
        <div className="flex flex-wrap items-center space-x-4">
          <div className="flex items-center">
            {renderStars(mockProduct.rating)}
            <span className="ml-2 text-lg font-semibold !text-gray-900">
              {mockProduct.rating.toFixed(1)}
            </span>
          </div>
          <span className="!text-gray-700">
            {mockProduct.reviews} –≤—ñ–¥–≥—É–∫—ñ–≤
          </span>
        </div>
      </div>

      <button className="bg-green-800 !text-white px-6 py-2 rounded-lg font-medium hover:bg-green-900 transition-colors w-full sm:w-auto text-center">
        –ù–∞–ø–∏—Å–∞—Ç–∏ –≤—ñ–¥–≥—É–∫
      </button>
    </div>

    {/* –°–ø–∏—Å–æ–∫ –æ—Ç–∑—ã–≤–æ–≤ */}
    <div className="space-y-8">
      {mockReviews.map((review) => (
        <div key={review.id} className="border-b border-gray-200 pb-8">
          {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç–∑—ã–≤–∞ */}
          <div className="flex flex-col sm:flex-row sm:items-start sm:justify-between mb-4">
            <div>
              <div className="font-semibold !text-gray-900">
                {review.author}
              </div>
              <div className="text-sm !text-gray-600">{review.company}</div>
              <div className="flex items-center mt-2 flex-wrap">
                {renderStars(review.rating)}
                <span className="ml-2 text-sm !text-gray-500">
                  {new Date(review.date).toLocaleDateString("uk-UA")}
                </span>
              </div>
            </div>
          </div>

          {/* –¢–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞ */}
          <p className="!text-gray-800 mb-4 leading-relaxed">{review.content}</p>

          {/* –ü–ª—é—Å—ã */}
          {review.pros && review.pros.length > 0 && (
            <div className="mb-3">
              <div className="font-medium !text-green-800 mb-2">
                –ü–µ—Ä–µ–≤–∞–≥–∏:
              </div>
              <ul className="list-disc list-inside text-sm !text-gray-800 space-y-1">
                {review.pros.map((pro, index) => (
                  <li key={index}>{pro}</li>
                ))}
              </ul>
            </div>
          )}

          {/* –ú–∏–Ω—É—Å—ã */}
          {review.cons && review.cons.length > 0 && (
            <div>
              <div className="font-medium !text-red-800 mb-2">
                –ù–µ–¥–æ–ª—ñ–∫–∏:
              </div>
              <ul className="list-disc list-inside text-sm !text-gray-800 space-y-1">
                {review.cons.map((con, index) => (
                  <li key={index}>{con}</li>
                ))}
              </ul>
            </div>
          )}
        </div>
      ))}
    </div>
  </div>
)}

          </div>
        </div>

        {/* Similar Products */}
        <div className="mt-16">
          <h2 className="text-2xl font-bold text-gray-900 mb-8">
            –°—Ö–æ–∂—ñ —Ç–æ–≤–∞—Ä–∏
          </h2>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
            {mockSimilarProducts.map((product) => (
              <div
                key={product.id}
                className="bg-white rounded-lg shadow-sm hover:shadow-md transition-shadow group"
              >
                <div className="relative aspect-[4/3] bg-gray-100 rounded-t-lg overflow-hidden">
                  {product.image ? (
                    <Image
                      alt={product.name}
                      src={product.image}
                      fill
                      className="object-cover"
                    />
                  ) : (
                    <div className="flex items-center justify-center w-full h-full">
                      <div className="text-4xl text-gray-400">üì¶</div>
                    </div>
                  )}

                  <div className="absolute top-2 left-2 flex space-x-1">
                    <button className="p-1 bg-white rounded-full shadow hover:bg-gray-50">
                      <Scale size={12} className="text-gray-600" />
                    </button>
                    <button className="p-1 bg-white rounded-full shadow hover:bg-gray-50">
                      <Heart size={12} className="text-gray-600" />
                    </button>
                  </div>
                </div>

                <div className="p-4">
                  <div className="flex items-center mb-2">
                    <div className="flex items-center">
                      {renderStars(product.rating)}
                    </div>
                    <span className="text-xs text-gray-500 ml-2">
                      {product.reviews} –≤—ñ–¥–≥—É–∫—ñ–≤
                    </span>
                  </div>

                  <h3 className="font-semibold text-gray-900 mb-3 text-sm group-hover:text-green-800 transition-colors">
                    {product.name}
                  </h3>

                  <div className="flex items-center justify-between">
                    <div>
                      <div className="text-lg font-bold text-gray-900">
                        {formatPrice(product.price)}
                      </div>
                      {product.oldPrice && (
                        <div className="text-sm text-gray-500 line-through">
                          {formatPrice(product.oldPrice)}
                        </div>
                      )}
                    </div>
                    <button className="bg-green-800 text-white px-3 py-2 rounded-lg text-sm font-medium hover:bg-green-900 transition-colors">
                      –í –∫–æ—à–∏–∫
                    </button>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>
    </div>
  );
};

export default ProductPage;
